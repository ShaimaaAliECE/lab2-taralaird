{"version":3,"sources":["App.js","index.js"],"names":["Space","props","className","value","Column","onClick","handleClick","Array","spaces","length","map","x","j","Board","state","boardState","fill","playerTurn","winner","full","this","setState","colID","boardCopy","arr","slice","indexOf","newColumn","reverse","console","log","makeMove","bs","c","r","checkLine","checkWinner","winnerMessageStyle","columns","i","startGame","Component","App","a","b","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb076521.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n//spaces are what the player tokens can go in \n//4 spaces in a line win a game \nfunction Space(props){\n  return <div className=\"Space\"><div className={props.value}></div></div>\n}\n\n//columns are made up spaces \n//they are what can be clicked on\nfunction Column(props){\n    return <div className=\"Column\" onClick={() => props.handleClick()}>\n      {[...Array(props.spaces.length)].map((x, j) => \n        <Space key={j} value={props.spaces[j]}></Space>)}\n      </div>\n }\n\nclass Board extends Component {\n\n  constructor() {\n    super();\n\n    //used when app is just opened\n    this.state = {\n      //creates empty board 7 columns and 6 rows using a double array\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      //starts with the red player\n      playerTurn: 'Red',\n      //no winner yet\n      winner: '',\n      //all spaces are empty \n      full: 0\n    }\n  }\n\n  //when user starts a game\n  startGame(){\n    this.setState({\n       //board is empty \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n       //full is set back to zero\n       full:0\n    })\n  }\n\n  //when column is clicked a move is made \n  makeMove(colID){\n    //creates a copy of the board of updating reasons\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    //makes sure column isn't full \n    if( boardCopy[colID].indexOf(null) !== -1 ){\n      //adds player token to the board in that column \n      let newColumn = boardCopy[colID].reverse()\n      newColumn[newColumn.indexOf(null)] = this.state.playerTurn\n      newColumn.reverse()\n      //once move is made the board is updated fully (the boardCopy becomes the actual Board)\n      //and it becomes the next players turn, full is incremented by one \n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        full: this.state.full+1\n      })\n      console.log(this.state.full); \n    }\n\n  }\n\n  //when clicked it will make a move\n  handleClick(colID) {\n    //only works if the game hasnt been won \n    if(this.state.winner === ''){\n      this.makeMove(colID)\n    }\n  }\n  \n  //check for a winner everytime the board is updated (a move is made)\n  componentDidUpdate(){\n    let winner = checkWinner(this.state.boardState)\n    if(this.state.winner !== winner)\n      this.setState({winner: winner})\n  }\n\n  render(){\n\n    //When the game is won display winner message\n    let winnerMessageStyle\n    if(this.state.winner !== \"\"){\n      winnerMessageStyle = \"winnerMessage appear\"\n    }else {\n      winnerMessageStyle = \"winnerMessage\"\n    }\n\n    //Contruct columns\n    let columns = [...Array(this.state.boardState.length)].map((x, i) => \n      <Column \n      //columns have an id, are made of spaces, and can be clicked\n          key={i}\n          spaces={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Column>\n    )\n\n    //displays board made of columns, \n    //possibly shows winner meassage when game is won\n    //then the button to start a new game when game is won, board if full, or game hasn't been selected \n    return (\n      <div>\n          <div className=\"Board\">\n            {columns}\n          </div>\n      \n        <div className={winnerMessageStyle}>{this.state.winner}</div>\n        {( this.state.winner !== ''|| this.state.full === 42) &&\n          <div>\n            <button onClick={() => this.startGame()}>Play a New Game</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Connect Four</h2>\n        </div>\n        <div className=\"Game\">\n          <Board></Board>\n        </div>\n      </div>\n    );\n  }\n}\n\n//makes sure that the line is not empty and then checks that the line is composed of all the same colour\nfunction checkLine(a,b,c,d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n//checks for a winner and if there is winner returns a display message\nfunction checkWinner(bs) {\n//c are columns and r are rows \n//bs[c][r] are items in a double array that can be considered the spaces and are filled with player tokens\n  //checks vertical lines\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 4; r++)\n            if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n               return bs[c][r] +' wins!'\n\n    //checks horizontal right\n    for (let r = 0; r < 6; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n                 return bs[c][r] +' wins!'\n\n    //checks diagonal lines going up to the left\n    for (let r = 0; r < 3; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r+1], bs[c+2][r+2], bs[c+3][r+3]))\n                return bs[c][r] +' wins!'\n\n    //checks diagonal lines going up to the right\n    for (let r = 0; r < 4; r++)\n         for (let c = 3; c < 6; c++)\n             if (checkLine(bs[c][r], bs[c-1][r+1], bs[c-2][r+2], bs[c-3][r+3]))\n                return bs[c][r] +' wins!'\n\n    //no winner so no winner message\n    return \"\";\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}